"""Routes for task management.

The blueprint exposes CRUD endpoints that operate on a JSON file
``tasks.json`` located in the same directory as this module.  All data is
loaded into memory per request to keep the implementation simple and
thread‑safe for development purposes.
"""

import json
import os
from flask import Blueprint, jsonify, request, abort

# Path to the JSON file that stores tasks.  It is defined as a module
# level constant so it can be monkeypatched in tests.
TASKS_FILE = os.path.join(os.path.dirname(__file__), "tasks.json")

tasks_bp = Blueprint("tasks", __name__)

def _load_tasks():
    """Return the list of tasks from :data:`TASKS_FILE`.  If the file
    does not exist, an empty list is returned.
    """
    try:
        with open(TASKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def _save_tasks(tasks):
    """Persist the given list of tasks to :data:`TASKS_FILE`."""
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)

@tasks_bp.route("/tasks", methods=["GET"])
def get_tasks():
    """Return all tasks as JSON."""
    return jsonify(_load_tasks()), 200

@tasks_bp.route("/tasks", methods=["POST"])
def create_task():
    """Create a new task.

    Expected JSON body:
    {"content": "text", "state": "Por Hacer"}
    The ``id`` is autogenerated as an integer one greater than the max
    existing id, or 1 if no tasks exist.
    """
    data = request.get_json() or {}

    content = data.get("content")
    state = data.get("state", "Por Hacer")

    if not content or not isinstance(content, str):
        abort(400, description="'content' must be a non‑empty string")

    tasks = _load_tasks()
    new_id = max((t.get("id", 0) for t in tasks), default=0) + 1
    task = {"id": new_id, "content": content, "state": state}
    tasks.append(task)

    _save_tasks(tasks)
    return jsonify(task), 201

@tasks_bp.route("/tasks/<int:task_id>", methods=["PUT"])
def update_task(task_id):
    """Update the content or state of an existing task.

    The request body may contain ``content`` and/or ``state`` keys.
    """
    data = request.get_json() or {}

    if not data:
        abort(400, description="No data provided for update")

    tasks = _load_tasks()
    task = next((t for t in tasks if t.get("id") == task_id), None)
    if not task:
        abort(404, description=f"Task {task_id} not found")

    content = data.get("content")
    state = data.get("state")

    if content is not None:
        if not isinstance(content, str) or not content:
            abort(400, description="'content' must be a non‑empty string")
        task["content"] = content

    if state is not None:
        if not isinstance(state, str) or not state:
            abort(400, description="'state' must be a non‑empty string")
        task["state"] = state

    _save_tasks(tasks)
    return jsonify(task), 200

@tasks_bp.route("/tasks/<int:task_id>", methods=["DELETE"])
def delete_task(task_id):
    """Delete the task with the given ``task_id``."""
    tasks = _load_tasks()
    new_tasks = [t for t in tasks if t.get("id") != task_id]

    if len(new_tasks) == len(tasks):
        abort(404, description=f"Task {task_id} not found")

    _save_tasks(new_tasks)
    return '', 204