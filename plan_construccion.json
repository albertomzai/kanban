{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ],
    "descripcion": "Gestión completa de tareas en el tablero Kanban.",
    "parametros_entrada_GET": {},
    "parametros_entrada_POST": {
      "content": "string",
      "state": "\"Por Hacer\""
    },
    "parametros_entrada_PUT": {
      "id": "integer",
      "content": "string (opcional)",
      "state": "\"Por Hacer\" | \"En Progreso\" | \"Hecho\" (opcional)"
    },
    "parametros_entrada_DELETE": {
      "id": "integer"
    },
    "respuesta_GET": [
      {
        "id": "integer",
        "content": "string",
        "state": "\"Por Hacer\" | \"En Progreso\" | \"Hecho\""
      }
    ],
    "respuesta_POST": {
      "id": "integer",
      "content": "string",
      "state": "\"Por Hacer\""
    },
    "respuesta_PUT": {
      "id": "integer",
      "content": "string",
      "state": "\"Por Hacer\" | \"En Progreso\" | \"Hecho\""
    },
    "respuesta_DELETE": {
      "message": "string"
    }
  },
  "contrato_qa_e2e": {
    "column_por_hacer": "col-por-hacer",
    "column_en_progreso": "col-en-progreso",
    "column_hecho": "col-hecho",
    "add_task_button": "btn-add-task",
    "task_card": "card-task",
    "edit_task_input": "input-edit-task"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear fichero requirements.txt con Flask y pytest.",
        "Crear fichero pytest.ini configurado para la raíz del proyecto.",
        "Crear fichero app.py que importe create_app desde backend e inicie la aplicación.",
        "Crear paquete backend/ con __init__.py definiendo factory create_app.",
        "En backend/__init__.py, registrar Blueprint tasks_bp y configurar Flask para servir archivos estáticos de frontend.",
        "Crear archivo backend/routes.py que defina un Blueprint tasks_bp con endpoints GET, POST, PUT, DELETE según api_contract.",
        "Implementar lógica en routes.py para leer y escribir tareas en tasks.json usando operaciones JSON seguras.",
        "Agregar manejo de errores y validaciones de entrada para cada endpoint.",
        "Crear carpeta tests/ con test_backend.py que use el cliente de Flask y pytest para probar todos los endpoints.",
        "Añadir un archivo .gitignore con patrones comunes (.venv, __pycache__, node_modules)."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear frontend/index.html como SPA con tres columnas verticales usando CSS Grid o Flexbox.",
        "Incluir en index.html un botón con data-testid 'btn-add-task' para crear nuevas tarjetas.",
        "Renderizar tareas recibidas del backend dentro de sus columnas correspondientes, cada tarjeta con data-testid 'card-task'.",
        "Implementar funcionalidad de edición inline al hacer clic en una tarjeta, usando un input con data-testid 'input-edit-task'.",
        "Agregar lógica JavaScript ES6 para cargar tareas iniciales mediante fetch GET /api/tasks.",
        "Añadir manejadores de eventos para crear, actualizar y eliminar tareas a través de las llamadas API correspondientes.",
        "Implementar drag‑and‑drop nativo del navegador para mover tarjetas entre columnas, actualizando el estado con PUT /api/tasks/<id>."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear carpeta cypress/e2e y archivo kanban.cy.js.",
        "Enkanban.cy.js, escribir pruebas que: visitar index.html, agregar una tarjeta, editar su texto, arrastrarla a otra columna, y verificar el cambio de estado mediante los data-testid definidos."
      ]
    }
  ]
}