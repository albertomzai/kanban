{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint para realizar un cálculo específico de dos números.",
    "parametros_entrada": {
      "numero1": "float",
      "numero2": "float"
    },
    "respuesta_esperada": {
      "resultado": "float"
    }
  },
  "contrato_qa_e2e": {
    "pantalla_display": "display",
    "boton_numero_1": "btn-1",
    "boton_numero_7": "btn-7",
    "boton_operador_suma": "btn-plus",
    "boton_calcular": "btn-equals"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con una estructura de directorios básica para el backend.",
        "Definir el endpoint POST '/api/calculate' para recibir los números.",
        "Implementar la lógica de cálculo (ej. suma, resta, multiplicación) en la función asociada al endpoint.",
        "Asegurar la validación de los datos de entrada para evitar errores y manejar excepciones.",
        "Devolver la respuesta del cálculo en formato JSON.",
        "Crear el fichero `requirements.txt` listando 'Flask' y 'pytest'.",
        "Crear un fichero `pytest.ini` en la raíz con el contenido '[pytest]\\npythonpath = .'",
        "Crear el paquete `backend/` con un fichero `__init__.py` que defina la application factory `create_app`.",
        "Dentro de `backend/__init__.py`, configurar la aplicación Flask para que sirva los ficheros estáticos desde la ruta relativa '../frontend'.",
        "Dentro del paquete `backend/`, crear un fichero `routes.py` con la lógica del endpoint '/api/calculate' usando un Blueprint de Flask.",
        "Crear el fichero `app.py` en la raíz, que importe `create_app` desde el paquete `backend` y ejecute la aplicación.",
        "Crear la carpeta `tests/` y dentro un fichero `test_backend.py` con pruebas para el endpoint '/api/calculate' usando el test client de `pytest`.",
        "Crear un fichero `.gitignore` en la raíz para ignorar ficheros de entorno (`.venv`, `instance/`, `__pycache__/`, `*.pyc`, node_modules)."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'frontend/index.html' con la estructura básica: título, formulario de entrada para dos números y un botón.",
        "Añadir un elemento HTML para mostrar el resultado del cálculo.",
        "Implementar el código JavaScript directamente en 'index.html' para capturar los valores del formulario.",
        "Realizar una solicitud AJAX (fetch) al endpoint '/api/calculo' del backend con los datos de los números.",
        "Actualizar dinámicamente el área de resultados en 'index.html' con la respuesta recibida del backend.",
        "Incluir manejo básico de errores en el frontend para mostrar mensajes al usuario si la API falla."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear un fichero de prueba End-to-End (`cypress/e2e/test.cy.js`) que visite la página principal, simule un cálculo (ej: '5+3') y verifique que el resultado ('8') aparece en pantalla."
      ]
    }
  ]
}