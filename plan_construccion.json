{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo_GET": {
      "descripcion": "Devuelve todas las tareas existentes.",
      "respuesta_esperada": {
        "tasks": [
          {
            "id": "integer",
            "content": "string",
            "state": "string (Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
          }
        ]
      }
    },
    "metodo_POST": {
      "descripcion": "Crea una nueva tarea con contenido y estado inicial.",
      "parametros_entrada": {
        "content": "string",
        "state": "string (Valor: 'Por Hacer')"
      },
      "respuesta_esperada": {
        "id": "integer",
        "content": "string",
        "state": "string"
      }
    },
    "metodo_PUT": {
      "descripcion": "Actualiza una tarea existente por id.",
      "parametros_entrada": {
        "content": "string (opcional)",
        "state": "string (opcional)"
      },
      "respuesta_esperada": {
        "id": "integer",
        "content": "string",
        "state": "string"
      }
    },
    "metodo_DELETE": {
      "descripcion": "Elimina una tarea existente por id.",
      "respuesta_esperada": {
        "message": "string"
      }
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear un entorno virtual y activar dependencias básicas de Flask.",
        "Estructurar el proyecto con carpetas 'app', 'static' y 'templates'.",
        "Implementar un módulo 'tasks_manager.py' que cargue, guarde y manipule datos en 'tasks.json'.",
        "Definir una clase Flask 'KanbanAPI' con los endpoints GET, POST, PUT y DELETE según el contrato.",
        "Configurar manejo de errores para respuestas JSON coherentes.",
        "Agregar lógica de generación automática de IDs únicos al crear tareas.",
        "Implementar validación de entrada para asegurar que 'state' sea uno de los valores permitidos.",
        "Habilitar CORS para permitir llamadas desde la SPA en el mismo dominio.",
        "Escribir pruebas unitarias básicas para cada endpoint usando Flask's test client.",
        "Documentar la API con comentarios claros y mantener el contrato actualizado."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear 'index.html' con estructura básica: encabezado, tres columnas de tablero y un formulario para añadir tareas.",
        "Incorporar estilos CSS inline o en una etiqueta <style> usando Flexbox para la disposición vertical de las columnas.",
        "Agregar tarjetas como elementos <div> dentro de cada columna, generados dinámicamente por JavaScript.",
        "Implementar función JavaScript que haga fetch GET a '/api/tasks' al cargar la página y renderice todas las tarjetas.",
        "Añadir evento click en el botón 'Add Task' para capturar texto del input y enviar POST a '/api/tasks', luego actualizar la vista.",
        "Habilitar edición inline: al hacer doble clic en una tarjeta, reemplazar su contenido por un campo de texto editable que envíe PUT al terminar.",
        "Integrar drag-and-drop usando el API DragEvent para mover tarjetas entre columnas.",
        "Al soltar una tarjeta, enviar PUT a '/api/tasks/<id>' con el nuevo estado basado en la columna destino.",
        "Incluir manejo de errores simples: mostrar mensajes de alerta si las llamadas a la API fallan.",
        "Optimizar rendimiento evitando re-renderizados completos al actualizar tareas individuales."
      ]
    }
  ]
}