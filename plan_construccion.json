{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET, POST, PUT, DELETE",
    "descripcion": "Gestión de tareas en el tablero Kanban.",
    "parametros_entrada_POST": {
      "content": "string",
      "state": "string (Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
    },
    "parametros_entrada_PUT": {
      "id": "integer",
      "content": "string",
      "state": "string (Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
    },
    "respuesta_GET": [
      {
        "id": "integer",
        "content": "string",
        "state": "string"
      }
    ],
    "respuesta_POST": {
      "id": "integer",
      "content": "string",
      "state": "string"
    },
    "respuesta_PUT": {
      "id": "integer",
      "content": "string",
      "state": "string"
    },
    "respuesta_DELETE": {
      "message": "string"
    }
  },
  "contrato_qa_e2e": {
    "columna_por_hacer": "column-por-hacer",
    "columna_en_progreso": "column-en-progreso",
    "columna_hecho": "column-hecho",
    "boton_nueva_tarea": "btn-new-task",
    "tarjeta_1": "task-card-1",
    "drag_area": "drag-area"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios: backend/, backend/__init__.py, backend/routes.py, backend/tasks_storage.py.",
        "Definir en backend/__init__.py una factory create_app que inicialice Flask y registre el Blueprint tasks_bp.",
        "En backend/routes.py crear un Blueprint 'tasks_bp' con rutas '/api/tasks' para GET y POST.",
        "Implementar en routes.py la ruta PUT '/api/tasks/<int:id>' para actualizar tareas, validando existencia.",
        "Implementar en routes.py la ruta DELETE '/api/tasks/<int:id>' para eliminar tareas.",
        "En backend/tasks_storage.py crear funciones cargar_tareas() y guardar_tareas(tareas) que lean/escriban el archivo 'tasks.json'.",
        "Añadir lógica de generación de ID incremental al crear nuevas tareas.",
        "Configurar manejo de errores 404 y 400 con respuestas JSON adecuadas.",
        "Crear un archivo requirements.txt con Flask.",
        "Crear un archivo .gitignore para excluir __pycache__ y venv."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo frontend/index.html con estructura básica de columnas usando CSS Grid.",
        "Añadir botones y formularios inline para crear nuevas tareas en la columna 'Por Hacer'.",
        "Implementar tarjetas de tarea que muestren contenido y permitan edición al hacer clic, enviando PUT a la API.",
        "Incorporar drag-and-drop con el API DragEvent, actualizando el estado de la tarjeta mediante una llamada PUT al backend cuando se suelta en otra columna.",
        "Agregar atributos data-testid según contrato_qa_e2e para columnas, botones y tarjetas.",
        "Escribir estilos CSS inline o dentro de <style> para layout y apariencia mínima."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear la carpeta cypress/e2e/ con un archivo kanban.cy.js.",
        "Enkanban.cy.js escribir pruebas que: visitar '/' ; crear una nueva tarea; arrastrar la tarjeta a 'En Progreso'; verificar cambio de columna y persistencia al recargar la página."
      ]
    }
  ]
}