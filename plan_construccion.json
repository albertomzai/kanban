{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo_GET": {
      "descripcion": "Devuelve todas las tareas existentes.",
      "respuesta_esperada": [
        {
          "id": "integer",
          "content": "string",
          "state": "string (Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
        }
      ]
    },
    "metodo_POST": {
      "descripcion": "Crea una nueva tarea.",
      "parametros_entrada": {
        "content": "string",
        "state": "string (default: 'Por Hacer')"
      },
      "respuesta_esperada": {
        "id": "integer",
        "content": "string",
        "state": "string"
      }
    },
    "metodo_PUT": {
      "descripcion": "Actualiza una tarea existente.",
      "parametros_entrada": {
        "content": "string (opcional)",
        "state": "string (opcional)"
      },
      "respuesta_esperada": {
        "id": "integer",
        "content": "string",
        "state": "string"
      }
    },
    "metodo_DELETE": {
      "descripcion": "Elimina una tarea.",
      "parametros_entrada": {},
      "respuesta_esperada": {
        "message": "string"
      }
    }
  },
  "contrato_qa_e2e": {
    "columna_por_hacer": "column-pending",
    "columna_en_progreso": "column-in-progress",
    "columna_hecho": "column-completed",
    "boton_agregar_tarea": "btn-add-task",
    "tarjeta_task": "task-card",
    "input_editar_tarea": "input-edit-task"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la carpeta raíz del proyecto con un subdirectorio 'backend'.",
        "Dentro de 'backend', crear el fichero '__init__.py' que exponga una factory 'create_app()'.",
        "Definir en 'backend/routes.py' un Blueprint llamado 'tasks_bp' con los endpoints GET, POST, PUT y DELETE para '/api/tasks'.",
        "Implementar funciones auxiliares para leer y escribir el archivo 'tasks.json' dentro del directorio raíz.",
        "Agregar la lógica de generación automática de identificadores únicos para nuevas tareas.",
        "Configurar la aplicación Flask en 'create_app()' para usar el Blueprint y servir los archivos estáticos desde '../frontend'.",
        "Crear el fichero 'requirements.txt' con las dependencias: Flask, pytest.",
        "Crear el fichero 'pytest.ini' con la configuración básica '[pytest]\\npythonpath = .'.",
        "Crear el fichero 'app.py' en la raíz que importe 'create_app' del paquete 'backend' y ejecute la aplicación con host='0.0.0.0', port=5000.",
        "Agregar un directorio 'tests/' con un fichero 'test_backend.py' que utilice el test client de Flask para verificar los cuatro endpoints según el api_contract.",
        "Crear un archivo '.gitignore' en la raíz para excluir entornos virtuales, __pycache__, node_modules y logs."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el fichero 'frontend/index.html' con una estructura SPA que contenga tres columnas verticales etiquetadas 'Por Hacer', 'En Progreso' y 'Hecho'.",
        "Añadir un botón identificado por 'btn-add-task' para crear nuevas tarjetas en la columna 'Por Hacer'.",
        "Implementar el CSS interno usando Grid o Flexbox para distribuir las columnas.",
        "Incluir etiquetas de datos 'data-testid' según el contrato_qa_e2e para cada columna, tarjeta y botón.",
        "Añadir un script JavaScript ES6 dentro del mismo archivo que: (1) recupere las tareas desde la API GET al cargar; (2) renderice tarjetas con contenido editable en línea; (3) habilite drag‑and‑drop usando la API DragEvent para mover tarjetas entre columnas y, al soltar, envíe una llamada PUT a la API para actualizar el estado.",
        "Incorporar manejo de errores sencillo que muestre mensajes dentro del DOM cuando las llamadas AJAX fallen."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Definir un fichero de prueba Cypress 'cypress/e2e/kanban.cy.js' que: (1) visite la página principal; (2) añada una nueva tarea mediante el botón 'btn-add-task'; (3) arrastre la tarjeta recién creada a la columna 'En Progreso'; (4) verifique que el estado interno de la tarjeta haya cambiado y que la API haya sido llamada con los parámetros correctos.",
        "Configurar Cypress para usar los data-testid del contrato_qa_e2e al localizar elementos."
      ]
    }
  ]
}