{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET,POST,PUT,DELETE",
    "descripcion": "Endpoint para gestionar tareas en el tablero Kanban.",
    "esquema_de_datos_tarea": {
      "id": "integer",
      "contenido": "string",
      "estado": "string (Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
    }
  },
  "contrato_qa_e2e": {
    "columnas": {
      "por_hacer": "task-column-0",
      "en_progreso": "task-column-1",
      "hecho": "task-column-2"
    },
    "cartas_tarea": {
      "id_unico": "task-card-{id}"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear estructura de directorios raíz con `backend/` como paquete principal.",
        "Generar `requirements.txt` listando Flask, jsonify y python-dotenv.",
        "Configurar `pytest.ini` con `pythonpath = .` para pruebas unitarias.",
        "Implementar archivo `tasks.json` en backend para persistencia de datos.",
        "Crear `backend/__init__.py` con factory app Flask que sirva estáticos desde `../frontend`.",
        "Definir endpoint GET /api/tasks para listar todas las tareas desde `tasks.json`.",
        "Implementar endpoint POST /api/tasks para crear nuevas tareas con estado 'Por Hacer'.",
        "Desarrollar endpoint PUT /api/tasks/<id> para actualizar estado y contenido de tareas.",
        "Crear endpoint DELETE /api/tasks/<id> para eliminar registros del archivo JSON.",
        "Asegurar validación de datos en todos los endpoints (ej. ID numérico, estados válidos).",
        "Escribir pruebas unitarias en `backend/tests/test_tasks.py` usando pytest y mocks de archivos.",
        "Generar `app.py` que inicialice la aplicación Flask desde el paquete backend."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear `index.html` con estructura básica: header, tres divs para columnas (por_hacer, en_progreso, hecho).",
        "Diseñar interfaz de tarjetas con contenido editable y funcionalidad drag-and-drop.",
        "Implementar JavaScript puro para manejar eventos de arrastrar/soltar entre columnas.",
        "Integrar llamadas AJAX (fetch) al backend para sincronizar datos en tiempo real.",
        "Agregar formulario en la columna 'Por Hacer' para crear nuevas tareas.",
        "Incluir manejo de errores en frontend para fallos API o validaciones."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Configurar pruebas Cypress en `cypress/e2e/test_kanban.cy.js`.",
        "Simular creación de tarea desde formulario y verificar persistencia en backend.",
        "Probar arrastrar tarjeta entre columnas y validar actualización del estado vía API.",
        "Verificar visualización correcta de tareas en todas las columnas después de movimientos."
      ]
    }
  ]
}