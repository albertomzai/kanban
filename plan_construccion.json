{
  "api_contract": {
    "ruta": "/api/tasks",
    "descripcion": "Gestiona las tareas del Kanban.",
    "esquema_de_datos_tarea": {
      "id": "integer",
      "content": "string",
      "state": "string (Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
    }
  },
  "contrato_qa_e2e": {
    "pantalla_display": "display",
    "boton_numero_1": "btn-1",
    "boton_numero_7": "btn-7",
    "boton_operador_suma": "btn-plus",
    "boton_calcular": "btn-equals"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con una estructura de directorios básica para el backend.",
        "Definir los endpoints GET '/api/tasks', POST '/api/tasks', PUT '/api/tasks/<id>' y DELETE '/api/tasks/<id>'.",
        "Implementar la lógica de negocio para manejar las tareas, incluyendo crear, leer, actualizar y eliminar.",
        "Persistir los datos de las tareas en un archivo 'tasks.json'.",
        "Asegurar la validación de los datos de entrada para evitar errores y manejar excepciones.",
        "Devolver las respuestas de la API en formato JSON correcto basado en el esquema definido.",
        "Crear el fichero `requirements.txt` listando 'Flask', 'pytest' y cualquier otra dependencia necesaria.",
        "Crear un fichero `pytest.ini` en la raíz con el contenido '[pytest]\\npythonpath = .'",
        "Crear el paquete `backend/` con un fichero `__init__.py` que defina la application factory `create_app`.",
        "Dentro de `backend/__init__.py`, configurar la aplicación Flask para que sirva los ficheros estáticos desde la ruta relativa '../frontend'.",
        "Dentro del paquete `backend/`, crear un fichero `routes.py` con la lógica de cada endpoint usando un Blueprint de Flask.",
        "Crear el fichero `app.py` en la raíz, que importe `create_app` desde el paquete `backend` y ejecute la aplicación.",
        "Crear la carpeta `tests/` y dentro un fichero `test_backend.py` con pruebas para cada endpoint usando el test client de `pytest`.",
        "Crear un fichero `.gitignore` en la raíz para ignorar ficheros de entorno (`.venv`, `instance/`, `__pycache__/`, `*.pyc`, node_modules)."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'frontend/index.html' con la estructura básica: título, tres columnas y un formulario de entrada para nuevas tareas.",
        "Añadir elementos HTML para mostrar las tarjetas dentro de cada columna.",
        "Implementar el código JavaScript directamente en 'index.html' para manejar la lógica del drag-and-drop entre columnas.",
        "Realizar solicitudes AJAX (fetch) al backend para crear, leer, actualizar y eliminar tareas según la interacción del usuario.",
        "Actualizar dinámicamente la interfaz de usuario basada en las respuestas recibidas del backend.",
        "Incluir manejo básico de errores en el frontend para mostrar mensajes al usuario si la API falla."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear un fichero de prueba End-to-End (`cypress/e2e/test.cy.js`) que visite la página principal, simule la creación y movimiento de una tarea y verifique que se actualiza correctamente en la interfaz."
      ]
    }
  ]
}