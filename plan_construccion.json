{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET, POST, PUT, DELETE",
    "descripcion": "Gestiona las tareas del tablero Kanban.",
    "parametros_entrada_post": {
      "content": "string",
      "state": "string (Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
    },
    "parametros_entrada_put": {
      "id": "integer",
      "content": "string (opcional)",
      "state": "string (opcional, Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
    },
    "respuesta_get": [
      {
        "id": "integer",
        "content": "string",
        "state": "string"
      }
    ],
    "respuesta_post": {
      "id": "integer",
      "content": "string",
      "state": "string"
    },
    "respuesta_put": {
      "id": "integer",
      "content": "string",
      "state": "string"
    },
    "respuesta_delete": {
      "message": "string"
    }
  },
  "contrato_qa_e2e": {
    "column_por_hacer": "col-por-hacer",
    "column_en_progreso": "col-en-progreso",
    "column_hecho": "col-hecho",
    "task_card": "task-card",
    "add_task_button": "btn-add-task",
    "edit_task_input": "input-edit-task"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear un proyecto Flask con estructura de directorios básica.",
        "Definir endpoint GET '/api/tasks' que devuelve todas las tareas leídas desde 'tasks.json'.",
        "Definir endpoint POST '/api/tasks' que recibe JSON con 'content' y crea una tarea con estado 'Por Hacer', asigna ID incremental, guarda en 'tasks.json' y devuelve la tarea creada.",
        "Definir endpoint PUT '/api/tasks/<id>' que actualiza el contenido o estado de la tarea especificada, persiste cambios en 'tasks.json' y devuelve la tarea actualizada.",
        "Definir endpoint DELETE '/api/tasks/<id>' que elimina la tarea indicada, persiste cambios y devuelve mensaje confirmatorio.",
        "Implementar lógica de lectura/escritura concurrente segura sobre el archivo 'tasks.json'.",
        "Crear fichero `requirements.txt` con dependencias Flask y pytest.",
        "Crear fichero `pytest.ini` con configuración básica para tests.",
        "Crear paquete `backend/` con `__init__.py` que exponga la factory `create_app`.",
        "Dentro de `backend/__init__.py`, configurar Blueprint y registrar rutas.",
        "Crear archivo `app.py` en raíz que importe `create_app` y lance el servidor Flask."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un único archivo 'index.html' con estructura HTML5, CSS Grid/Flexbox para tres columnas verticales.",
        "Incluir elementos con `data-testid` según contrato de pruebas: columnas y tarjetas.",
        "Agregar botón con `id='btn-add-task'` para crear nuevas tareas en la columna 'Por Hacer'.",
        "Implementar JavaScript ES6 que obtenga tareas desde GET '/api/tasks', renderice tarjetas, permita edición inline al hacer clic y detecte cambios de texto.",
        "Añadir funcionalidad drag‑and‑drop usando HTML5 Drag API; al soltar tarjeta en nueva columna, enviar PUT a backend para actualizar estado.",
        "Incorporar manejo básico de errores (alertas o mensajes) cuando la API falle."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear prueba Cypress que inicie el servidor, visite 'index.html', añada una tarea, arrastre a otra columna y verifique que el estado cambió correctamente.",
        "Utilizar los `data-testid` definidos en el contrato de pruebas para localizar elementos."
      ]
    }
  ]
}