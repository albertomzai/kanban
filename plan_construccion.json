{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET, POST, PUT, DELETE",
    "descripcion": "Gestión CRUD de tareas en el tablero Kanban.",
    "esquema_de_datos_tarea": {
      "id": "integer",
      "content": "string",
      "state": "string (Valores: 'Por Hacer', 'En Progreso', 'Hecho')"
    },
    "parametros_entrada_post": {
      "content": "string",
      "state": "string (opcional, default 'Por Hacer')"
    },
    "parametros_entrada_put": {
      "content": "string (opcional)",
      "state": "string (opcional)"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios para el proyecto Flask: app, static, templates.",
        "Inicializar un virtualenv y declarar las dependencias en requirements.txt (Flask).",
        "Implementar la carga inicial del archivo 'tasks.json' al iniciar la aplicación y guardarlo tras cada operación.",
        "Definir la ruta GET '/api/tasks' que devuelve una lista JSON con todas las tareas según el esquema de datos.",
        "Crear la ruta POST '/api/tasks' que recibe un cuerpo JSON, asigna un id incremental, valida los campos y añade la tarea al archivo.",
        "Implementar la ruta PUT '/api/tasks/<int:id>' para actualizar contenido o estado; validar existencia del id y campos recibidos.",
        "Agregar la ruta DELETE '/api/tasks/<int:id>' que elimina la tarea correspondiente y actualiza el archivo.",
        "Configurar manejo de errores HTTP (404, 400) con respuestas JSON consistentes.",
        "Incluir un middleware simple para habilitar CORS hacia el dominio del frontend.",
        "Probar las rutas con curl o Postman asegurando que los datos persisten en 'tasks.json'."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo único 'index.html' con la estructura básica: título, contenedor principal y tres columnas etiquetadas.",
        "Definir estilos CSS usando Flexbox o Grid para disponer las columnas verticalmente y tarjetas responsivas.",
        "Agregar un botón/ formulario en la columna 'Por Hacer' que permita crear nuevas tareas enviando una solicitud POST al backend.",
        "Implementar lógica JavaScript inline para cargar todas las tareas desde GET '/api/tasks' al inicializar la página y renderizarlas en sus columnas correspondientes.",
        "Añadir eventos de clic a cada tarjeta para activar un modo de edición del texto, guardando cambios con PUT cuando se confirma.",
        "Integrar una librería ligera de drag-and-drop (o API nativa) para permitir mover tarjetas entre columnas; al soltar actualizar el estado mediante PUT.",
        "Actualizar la vista en tiempo real después de cada operación (creación, edición, movimiento o eliminación).",
        "Incluir manejo básico de errores: mostrar mensajes al usuario cuando las llamadas a la API fallen.",
        "Optimizar el código para mantenerlo autocontenida y fácilmente extensible sin dependencias externas."
      ]
    }
  ]
}